*SpecialFileLocations.txt*	Various ways to access files from special locations.

		   SPECIAL FILE LOCATIONS    by Ingo Karkat
						    *SpecialFileLocations.vim*
description			|SpecialFileLocations-description|
usage				|SpecialFileLocations-usage|
installation			|SpecialFileLocations-installation|
configuration			|SpecialFileLocations-configuration|
integration			|SpecialFileLocations-integration|
limitations			|SpecialFileLocations-limitations|
known problems			|SpecialFileLocations-known-problems|
todo				|SpecialFileLocations-todo|
history				|SpecialFileLocations-history|

==============================================================================
DESCRIPTION				    *SpecialFileLocations-description*

This plugin ...

HOW IT WORKS								     *

SOURCE									     *
(Original Vim tip, Stack Overflow answer, ...)

SEE ALSO								     *
(Plugins offering complementary functionality, or plugins using this library.)

RELATED WORKS								     *
(Alternatives from other authors, other approaches, references not used here.)

==============================================================================
USAGE						  *SpecialFileLocations-usage*
		       *:Ccd* *:CEdit* *:Csplit* *:CSplit* *:CDrop* *:CRevert*
:CCd {dir}		Change the current directory to {dir} ...
:CEdit {file}		Edit {file} ...
:Csplit {file}		Edit {file} in a split (above) buffer...
:CSplit {file}		Edit {file} in a split (below) buffer...
:CDrop {file}		Drop {file} ...
:CRevert {file}		Revert the current buffer to the contents of {file} ...
		     *:CRead* *:CReadFragment* *:CReadSnip* *:CSave* *:CWrite*
:[line]CRead {file}	Read {file} ...
			... from one of the 'cdpath' directories.
:[line]CReadFragment {file}
			:CRead and insert fragment formatting around the read
			contents.
:[line]CReadSnip {file}
			:CRead and insert snip formatting around the read
			contents.
:CSave[!] [{file}]
:[range]CWrite[!] [{file}]
			Persist buffer into one of the 'cdpath' directories.


     *:RootCd* *:RootEdit* *:Rootsplit* *:RootSplit* *:RootDrop* *:RootRevert*
:RootCd {dir}		Change the current directory to project {dir} ...
:RootEdit {file}	Edit project {file} ...
:Rootsplit {file}	Edit project {file} in a split (above) buffer...
:RootSplit {file}	Edit project {file} in a split (below) buffer...
:RootDrop {file}	Drop project {file} ...
:RootRevert {file}	Revert the current buffer to the contents of {file} ...
      *:RootRead* *:RootReadFragment* *:RootReadSnip* *:RootSave* *:RootWrite*
:[line]RootRead {file}	Read project {file} ...
			... from the project root or one of its
			subdirectories.
:[line]RootReadFragment {file}
			:RootRead and insert fragment formatting around the
			read contents.
:[line]RootReadSnip {file}
			:RootRead and insert snip formatting around the
			read contents.
:RootSave[!] [{file}]
:[range]RootWrite[!] [{file}]
			Persist buffer to the project root or one of its
			subdirectories.


     *:TempCd* *:TempEdit* *:Tempsplit* *:TempSplit* *:TempDrop* *:TempRevert*
:TempCd {dir}		Change the current directory to {dir} ...
:TempEdit {file}|N	Edit {file} (or the N'th newest file (subdirectories
			are not counted)) ...
:Tempsplit {file}|N	Edit {file} in a split (above) buffer...
:TempSplit {file}|N	Edit {file} in a split (below) buffer...
:TempDrop {file}|N	Drop {file} ...
:TempRevert {file}|N	Revert the current buffer to the contents of {file} ...
      *:TempRead* *:TempReadFragment* *:TempReadSnip* *:TempSave* *:TempWrite*
:[line]TempRead {file}|N	Read {file} ...
			... from the temp directory or one of its
			subdirectories.
:[line]TempReadFragment {file}|N
			:TempRead and insert fragment formatting around the
			read contents.
:[line]TempReadSnip {file}|N
			:TempRead and insert snip formatting around the read
			contents.
:TempSave[!] [{file}|N]
:[range]TempWrite[!] [{file}|N]
			Persist buffer to the temp directory or one of its
			subdirectories.


    *:TestingCd* *:TestingEdit* *:Testingsplit* *:TestingSplit* *:TestingDrop*
:Testing Cd {dir}	Change the current directory to testing {dir} ...
:TestingEdit {file}	Edit testing {file} ...
:Testingsplit {file}	Edit testing {file} in a split (above) buffer...
:TestingSplit {file}	Edit testing {file} in a split (below) buffer...
:TestingDrop {file}	Drop testing {file} ...
			... from the testing directory or one of its
			subdirectories.
						*:TestingSave* *:TestingWrite*
:TestingSave[!] [{file}]
:[range]TestingWrite[!] [{file}]
			Persist buffer as a testing file.
								*:TestingYank*
:TestingYank [{file}]	Yank the filespec of testing {file} into both default
			register and the system clipboard.


*:ScratchCd* *:ScratchEdit* *:Scratchsplit* *:ScratchSplit* *:ScratchDrop* *:ScratchRevert*
:ScratchCd {dir}	Change the current directory to {dir} ...
:ScratchEdit {file}|N	Edit {file} (or the N'th newest file (subdirectories
			are not counted)) ...
:Scratchsplit {file}|N	Edit {file} in a split (above) buffer...
:ScratchSplit {file}|N	Edit {file} in a split (below) buffer...
:ScratchDrop {file}|N	Drop {file} ...
:ScratchRevert {file}|N	Revert the current buffer to the contents of {file} ...
			... from the default g:scratchDirspec.
		    *:ScratchRead*   *:ScratchReadFragment* *:ScratchReadSnip*
:[line]ScratchRead {file}|N
			Read {file} from the default g:scratchDirspec.
:[line]ScratchReadFragment {file}|N
			:ScratchRead and insert fragment formatting around the
			read contents.
:[line]ScratchReadSnip {file}|N
			:ScratchRead and insert snip formatting around the
			read contents.
			       *:ScratchSource* *:ScratchNew* *:ScratchCreate*
:ScratchSource {file}|N	Source {file} from the default g:scratchDirspec.
:[N]ScratchNew [{dir}|{filename} |{filespec}]
			Create a |:new| buffer in the default g:scratchDirspec,
			or passed {dir}, or passed {filename} (in
			g:scratchDirspec), or passed {filespec}. Any changes
			won't be persisted and be automatically discarded
			unless |:ScratchWrite| is used.
:[N]ScratchCreate [{dir}|{filename} |{filespec}]
			Create a |:new| buffer in the default g:scratchDirspec,
			or passed {dir}, or passed {filename} (in
			g:scratchDirspec), or passed {filespec}. This creates
			a normal buffer where changes have to be persisted
			with |:w| or discarded with |:bd|!.
						*:ScratchSave* *:ScratchWrite*
:ScratchSave[!]  [{dir}|{filename} |{filespec} |N]
:[range]ScratchWrite[!] [{dir}|{filename} |{filespec} |N]
			Persist a (scratch, or any) buffer to the default
			g:scratchDirspec, or passed {dir} (with the buffer's
			filename), or passed {filename} (in g:scratchDirspec,
			unless it's prepended with "./"), or passed {filespec}
			(if possible, inside g:scratchDirspec).
			:ScratchSave converts the scratch buffer to a "normal"
			buffer, which can subsequently be saved via :w.
			With :ScratchWrite, the scratch buffer keeps its
			"scratchiness", and can be updated, toggled, ... with
			the usual commands. Subsequent saves must be done with
			:ScratchWrite, too.
								  *:ScratchIt*
:ScratchIt		Turn the current buffer into a scratch buffer; that
			means any edits need not be persisted when closing the
			buffer / Vim. :ScratchSave will undo this and persist
			the buffer.
:ScratchIt {cmd}	Execute {cmd} and turn the current buffer into a
			scratch buffer. Useful to :PrettyPrint a buffer and
			then leave it alone.
:Unscratch [{dir}|{filename} |{filespec}]
			Turn a scratch buffer into a "normal" buffer by
			removing any [Scratch] appendix from the buffer name
			(or renaming to {filename}), and clearing scratchy
			buffer options like 'buftype', 'bufhidden', etc.
			Like |:ScratchSave| without the saving.


		       *:UCd* *:UEdit* *:Usplit* *:USplit* *:UDrop* *:URevert*
:UCd {dir}		Change the current directory to {dir} ...
:UEdit {file}|N		Edit {file} (or the N'th newest file (subdirectories
			are not counted)) ...
:Usplit {file}|N	Edit {file} in a split (above) buffer...
:USplit {file}|N	Edit {file} in a split (below) buffer...
:UDrop {file}|N		Drop {file} ...
:URevert {file}|N	Revert the current buffer to the contents of {file}
			... from the default g:unixhomeDirspec.
		     *:URead* *:UReadFragment* *:UReadSnip* *:USource* *:UNew*
:[line]URead {file}|N
			Read {file} from the default g:unixhomeDirspec.
:[line]UReadFragment {file}|N
			:URead and insert fragment formatting around the read
			contents.
:[line]UReadSnip {file}|N
			:URead and insert snip formatting around the read
			contents.
:USource {file}|N	Source {file} from the default g:unixhomeDirspec.
:[N]UNew [{dir}|{filename} |{filespec}]
			Create a |:new| buffer in the default g:unixhomeDirspec,
			or passed {dir}, or passed {filename} (in
			g:unixhomeDirspec), or passed {filespec}.
						    *:USave* *:UWrite*
:USave[!]  [{dir}|{filename} |{filespec} |N]
:[range]UWrite[!] [{dir}|{filename} |{filespec} |N]
			Persist a (Unixhome, or any) buffer to the default
			g:unixhomeDirspec, or passed {dir} (with the buffer's
			filename), or passed {filename} (in g:unixhomeDirspec,
			unless it's prepended with "./"), or passed {filespec}
			(if possible, inside g:unixhomeDirspec).


*:MediaCd* *:MediaEdit* *:Mediasplit* *:MediaSplit* *:MediaDrop* *:MediaRevert*
:MediaCd {dir}		Change the current directory to {dir} ...
:MediaEdit {file}|N	Edit {file} (or the N'th newest file (subdirectories
			are not counted)) ...
:Mediasplit {file}|N	Edit {file} in a split (above) buffer...
:MediaSplit {file}|N	Edit {file} in a split (below) buffer...
:MediaDrop {file}|N	Drop {file} ...
:MediaRevert {file}|N	Revert the current buffer to the contents of {file}
			... from a mounted medium.
 *:MediaRead* *:MediaReadFragment* *:MediaReadSnip* *:MediaSource* *:MediaNew*
:[line]MediaRead {file}|N
			Read {file} from a mounted medium.
:[line]MediaReadFragment {file}|N
			:MediaRead and insert fragment formatting around the
			read contents.
:[line]MediaReadSnip {file}|N
			:MediaRead and insert snip formatting around the read
			contents.
:MediaSource {file}|N	Source {file} from a mounted medium.



*:InboxCd* *:InboxEdit* *:Inboxsplit* *:InboxSplit* *:InboxDrop* *:InboxRevert*
:InboxCd {dir}		Change the current directory to {dir} ...
:InboxEdit {file}|N	Edit {file} (or the N'th newest file (subdirectories
			are not counted)) ...
:Inboxsplit {file}|N	Edit {file} in a split (above) buffer...
:InboxSplit {file}|N	Edit {file} in a split (below) buffer...
:InboxDrop {file}|N	Drop {file} ...
:InboxRevert {file}|N	Revert the current buffer to the contents of {file}
			... from the default g:inboxDirspec.
 *:InboxRead* *:InboxReadFragment* *:InboxReadSnip* *:InboxSource* *:InboxNew*
:[line]InboxRead {file}|N
			Read {file} from the default g:inboxDirspec.
:[line]InboxReadFragment {file}|N
			:InboxRead and insert fragment formatting around the
			read contents.
:[line]InboxReadSnip {file}|N
			:InboxRead and insert snip formatting around the
			read contents.
:InboxSource {file}|N	Source {file} from the default g:inboxDirspec.
:[N]InboxNew [{dir}|{filename} |{filespec}]
			Create a |:new| buffer in the default g:inboxDirspec,
			or passed {dir}, or passed {filename} (in
			g:inboxDirspec), or passed {filespec}.
						    *:InboxSave* *:InboxWrite*
:InboxSave[!]  [{dir}|{filename} |{filespec} |N]
:[range]InboxWrite[!] [{dir}|{filename} |{filespec} |N]
			Persist a (inbox, or any) buffer to the default
			g:inboxDirspec, or passed {dir} (with the buffer's
			filename), or passed {filename} (in g:inboxDirspec,
			unless it's prepended with "./"), or passed {filespec}
			(if possible, inside g:inboxDirspec).


*:CloudCd* *:CloudEdit* *:Cloudsplit* *:CloudSplit* *:CloudDrop* *:CloudRevert*
:CloudCd {dir}		Change the current directory to {dir} ...
:CloudEdit {file}|N	Edit {file} (or the N'th newest file (subdirectories
			are not counted)) ...
:Cloudsplit {file}|N	Edit {file} in a split (above) buffer...
:CloudSplit {file}|N	Edit {file} in a split (below) buffer...
:CloudDrop {file}|N	Drop {file} ...
:CloudRevert {file}|N	Revert the current buffer to the contents of {file}
			... from the default g:cloudDirspec.
 *:CloudRead* *:CloudReadFragment* *:CloudReadSnip* *:CloudSource* *:CloudNew*
:[line]CloudRead {file}|N
			Read {file} from the default g:cloudDirspec.
:[line]CloudReadFragment {file}|N
			:CloudRead and insert fragment formatting around the read
			contents.
:[line]CloudReadSnip {file}|N
			:CloudRead and insert snip formatting around the read
			contents.
:CloudSource {file}|N	Source {file} from the default g:cloudDirspec.
:[N]CloudNew [{dir}|{filename} |{filespec}]
			Create a |:new| buffer in the default g:cloudDirspec,
			or passed {dir}, or passed {filename} (in
			g:cloudDirspec), or passed {filespec}.
						    *:CloudSave* *:CloudWrite*
:CloudSave[!]  [{dir}|{filename} |{filespec} |N]
:[range]CloudWrite[!] [{dir}|{filename} |{filespec} |N]
			Persist a (cloud, or any) buffer to the default
			g:cloudDirspec, or passed {dir} (with the buffer's
			filename), or passed {filename} (in g:cloudDirspec,
			unless it's prepended with "./"), or passed {filespec}
			(if possible, inside g:cloudDirspec).


						  *:Logbook* *:LogbookInstall*
:Logbook [{logbook}]	Open a chronological logbook file (ft=logbook) to read
			or append an entry.
:LogbookInstall [{hostname}]
			Open the chronological installation logbook
			(ft=logbook) for the passed or current host.


				      *:Vim* *:Pack* *:Packfile* *:VimRuntime*
:Vim {vimfile}|{SID}	Quickly edit a ~/.vim/** file, .vimrc or .gvimrc, or
			the script having {SID}.
:Pack {package}/{vimfile}
			Quickly edit a Vimscript from a package
			(~/.vim/pack/*/start/**).
:Packfile {vimfile}	Quickly edit a Vimscript from any package
			(~/.vim/pack/**).
:VimRuntime {vimfile}	Quickly edit a $VIMRUNTIME/** file.

==============================================================================
INSTALLATION				   *SpecialFileLocations-installation*

The code is hosted in a Git repo at
    https://github.com/inkarkat/vim-SpecialFileLocations
You can use your favorite plugin manager, or "git clone" into a directory used
for Vim |packages|. Releases are on the "stable" branch, the latest unstable
development snapshot on "master".

This script is also packaged as a |vimball|. If you have the "gunzip"
decompressor in your PATH, simply edit the *.vmb.gz package in Vim; otherwise,
decompress the archive first, e.g. using WinZip. Inside Vim, install by
sourcing the vimball or via the |:UseVimball| command. >
    vim SpecialFileLocations*.vmb.gz
    :so %
To uninstall, use the |:RmVimball| command.

DEPENDENCIES				   *SpecialFileLocations-dependencies*

- Requires Vim 7.0 or higher.
- Requires the |ingo-library.vim| plugin (vimscript #4433), version 1.043 or
  higher.

==============================================================================
CONFIGURATION				  *SpecialFileLocations-configuration*

For a permanent configuration, put the following commands into your |vimrc|:
							    *g:scratchDirspec*
The directory location for scratch files.
						   *g:scratchFilenameTemplate*
Template for scratch filenames. It consists of a Dictionary with these keys: >
    let g:scratchFilenameTemplate = {
    \   'unnamed': 'untitled_%Y%m%d-%H%M%S',
    \   'named': '%%s',
    \   'given': '%%s',
    \}
The "unnamed" entry is taken for unnamed buffers, the "named" one for buffers
that already have a name, the "given" for when a name is supplied to the
:Scratch... command. Each is first passed to |strftime()|; the result then to
|printf()|.

							      *g:inboxDirspec*
The directory location for inbox files.
						     *g:inboxFilenameTemplate*
Template for inbox filenames. See |g:scratchFilenameTemplate| for details.

							    *g:logbookDirspec*
The directory location for logbooks.
						    *g:logbookDefaultFilename*
The default logbook when no arguments are supplied to |:Logbook|.

==============================================================================
INTEGRATION				    *SpecialFileLocations-integration*

==============================================================================
LIMITATIONS				    *SpecialFileLocations-limitations*

KNOWN PROBLEMS				 *SpecialFileLocations-known-problems*

TODO						   *SpecialFileLocations-todo*

IDEAS						  *SpecialFileLocations-ideas*

CONTRIBUTING				     *SpecialFileLocations-contribute*

Report any bugs, send patches, or suggest features via the issue tracker at
https://github.com/inkarkat/vim-SpecialFileLocations/issues or email (address
below).

==============================================================================
HISTORY						*SpecialFileLocations-history*

GOAL
First published version.

0.90	31-Oct-2017
Split off into separate plugin.

0.01	05-Feb-2010
Started development.

==============================================================================
Copyright: (C) 2010-2024 Ingo Karkat
The VIM LICENSE applies to this plugin; see |copyright|.

Maintainer:	Ingo Karkat <ingo@karkat.de>
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
